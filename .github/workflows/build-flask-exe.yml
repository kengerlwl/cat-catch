name: Build Flask M3U8 Manager EXE

on:
  push:
    branches: [ main, master ]
    paths:
      - 'flask-m3u8-manager/**'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'flask-m3u8-manager/**'
  workflow_dispatch:

jobs:
  build-exe:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        cd flask-m3u8-manager
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Prepare build environment
      run: |
        cd flask-m3u8-manager
        # 确保所有必要的目录存在
        if (!(Test-Path "templates")) { New-Item -ItemType Directory -Path "templates" }
        if (!(Test-Path "static")) { New-Item -ItemType Directory -Path "static" }
        if (!(Test-Path "downloads")) { New-Item -ItemType Directory -Path "downloads" }
        # 检查spec文件是否存在
        if (Test-Path "flask_m3u8_manager.spec") {
          Write-Host "Using existing spec file"
        } else {
          Write-Host "Spec file not found, will be created by PyInstaller"
        }

    - name: Build EXE with PyInstaller
      run: |
        cd flask-m3u8-manager
        pyinstaller flask_m3u8_manager.spec --clean --noconfirm

    - name: Create release package
      run: |
        cd flask-m3u8-manager
        New-Item -ItemType Directory -Path "release" -Force
        Copy-Item "dist\Flask-M3U8-Manager.exe" "release\"
        Copy-Item "README.md" "release\"
        Copy-Item "requirements.txt" "release\"

        "Flask M3U8 Manager - Portable Version" | Out-File -FilePath "release\README_EXE.txt" -Encoding UTF8
        "" | Out-File -FilePath "release\README_EXE.txt" -Append -Encoding UTF8
        "This is a portable executable version of Flask M3U8 Manager." | Out-File -FilePath "release\README_EXE.txt" -Append -Encoding UTF8
        "" | Out-File -FilePath "release\README_EXE.txt" -Append -Encoding UTF8
        "Usage:" | Out-File -FilePath "release\README_EXE.txt" -Append -Encoding UTF8
        "1. Double-click Flask-M3U8-Manager.exe to start the application" | Out-File -FilePath "release\README_EXE.txt" -Append -Encoding UTF8
        "2. The application will start on http://localhost:5000" | Out-File -FilePath "release\README_EXE.txt" -Append -Encoding UTF8
        "3. Your browser should automatically open to the management interface" | Out-File -FilePath "release\README_EXE.txt" -Append -Encoding UTF8
        "" | Out-File -FilePath "release\README_EXE.txt" -Append -Encoding UTF8
        "Features:" | Out-File -FilePath "release\README_EXE.txt" -Append -Encoding UTF8
        "- M3U8 video download management" | Out-File -FilePath "release\README_EXE.txt" -Append -Encoding UTF8
        "- Task queue and progress monitoring" | Out-File -FilePath "release\README_EXE.txt" -Append -Encoding UTF8
        "- MP4 conversion support" | Out-File -FilePath "release\README_EXE.txt" -Append -Encoding UTF8
        "- Integration with cat-catch browser extension" | Out-File -FilePath "release\README_EXE.txt" -Append -Encoding UTF8
        "" | Out-File -FilePath "release\README_EXE.txt" -Append -Encoding UTF8
        "Note: The downloads folder will be created in the same directory as the executable." | Out-File -FilePath "release\README_EXE.txt" -Append -Encoding UTF8

    - name: Upload EXE artifact
      uses: actions/upload-artifact@v4
      with:
        name: Flask-M3U8-Manager-Windows-EXE
        path: flask-m3u8-manager/release/
        retention-days: 30

    - name: Create Release (on main/master branch)
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ github.run_number }}
        name: Flask M3U8 Manager v${{ github.run_number }}
        body: |
          ## Flask M3U8 Manager - Windows Executable

          ### 🎬 功能特性
          - M3U8视频下载管理
          - 任务队列和进度监控
          - MP4格式转换支持
          - 与cat-catch浏览器扩展集成

          ### 📦 使用方法
          1. 下载 `Flask-M3U8-Manager.exe`
          2. 双击运行程序
          3. 浏览器会自动打开管理界面 (http://localhost:5000)
          4. 开始添加和管理下载任务

          ### 🔧 系统要求
          - Windows 10/11 (64位)
          - 无需安装Python环境
          - 建议预留足够的磁盘空间用于视频下载

          ### 📝 更新内容
          - 基于最新代码构建
          - 包含所有依赖项的独立可执行文件
          - 优化启动速度和稳定性

        files: |
          flask-m3u8-manager/release/Flask-M3U8-Manager.exe
          flask-m3u8-manager/release/README_EXE.txt
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
